import sys
import math
import random
import collections
import numpy as np
import pandas as pd
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                             QWidget, QTreeWidget, QTreeWidgetItem, QCheckBox,
                             QGraphicsView, QGraphicsScene, QPushButton,
                             QLabel, QSlider, QFileDialog, QLineEdit,
                             QTextEdit, QGroupBox, QSpinBox, QDoubleSpinBox, QDialogButtonBox, QScrollArea, QDialog,
                             QButtonGroup, QFrame, QSizePolicy)
from PyQt5.QtCore import Qt, QRectF, QTimer, QPointF
from PyQt5.QtGui import QColor, QBrush, QPen, QFont, QPainter, QPolygonF
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from collections import Counter
import string


class PatternSelectionDialog(QDialog):
    """美观的模式选择对话框"""

    def __init__(self, patterns, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Select Interesting Patterns")
        self.setMinimumSize(800, 600)

        # 设置对话框样式
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f5f5;
                font-family: Arial;
            }
            QLabel {
                color: #333;
                font-size: 14px;
            }
            QCheckBox {
                color: #444;
                font-size: 13px;
                padding: 8px;
                border-radius: 4px;
            }
            QCheckBox:hover {
                background-color: #e0e0e0;
            }
            QCheckBox::indicator {
                width: 16px;
                height: 16px;
            }
            QScrollArea {
                border: none;
            }
            QDialogButtonBox {
                border-top: 1px solid #ddd;
                padding: 10px;
            }
            QPushButton {
                min-width: 80px;
                padding: 6px 12px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton#okButton {
                background-color: #4CAF50;
                color: white;
            }
            QPushButton#okButton:hover {
                background-color: #45a049;
            }
            QPushButton#cancelButton {
                background-color: #f44336;
                color: white;
            }
            QPushButton#cancelButton:hover {
                background-color: #d32f2f;
            }
            .pattern-card {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 12px;
                margin-bottom: 8px;
            }
            .pattern-card:hover {
                border-color: #aaa;
                background-color: #f9f9f9;
            }
            .pattern-card[selected="true"] {
                border-color: #4CAF50;
                background-color: #e8f5e9;
            }
        """)

        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        # 添加标题和说明
        title = QLabel("<h2>Select Interesting Patterns</h2>")
        title.setStyleSheet("color: #2c3e50;")
        layout.addWidget(title)

        instruction = QLabel("The algorithm has discovered the following high utility patterns. "
                             "Please select the ones you're interested in:")
        instruction.setWordWrap(True)
        layout.addWidget(instruction)

        # 添加全选/取消全选按钮
        select_buttons = QHBoxLayout()
        select_all = QPushButton("Select All")
        select_all.setObjectName("selectAllButton")
        select_all.setStyleSheet("background-color: #2196F3; color: white;")
        select_all.clicked.connect(self.select_all_patterns)

        deselect_all = QPushButton("Deselect All")
        deselect_all.setObjectName("deselectAllButton")
        deselect_all.setStyleSheet("background-color: #607D8B; color: white;")
        deselect_all.clicked.connect(self.deselect_all_patterns)

        select_buttons.addWidget(select_all)
        select_buttons.addWidget(deselect_all)
        select_buttons.addStretch()
        layout.addLayout(select_buttons)

        # 创建滚动区域
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameShape(QFrame.NoFrame)

        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        scroll_layout.setContentsMargins(5, 5, 5, 5)
        scroll_layout.setSpacing(10)

        # 添加模式选择卡片
        self.checkboxes = []
        self.button_group = QButtonGroup()
        self.button_group.setExclusive(False)

        for idx, (pattern, utility, size) in enumerate(patterns):
            # 创建卡片容器
            card = QFrame()
            card.setObjectName("patternCard")
            card.setProperty("selected", "false")
            card.setStyleSheet("""
                QFrame#patternCard {
                    background-color: white;
                    border: 1px solid #ddd;
                    border-radius: 6px;
                    padding: 12px;
                }
                QFrame#patternCard:hover {
                    border-color: #aaa;
                    background-color: #f9f9f9;
                }
                QFrame#patternCard[selected="true"] {
                    border-color: #4CAF50;
                    background-color: #e8f5e9;
                }
            """)

            card_layout = QHBoxLayout(card)
            card_layout.setContentsMargins(10, 10, 10, 10)

            # 添加复选框
            checkbox = QCheckBox()
            checkbox.setStyleSheet("""
                QCheckBox {
                    spacing: 10px;
                }
                QCheckBox::indicator {
                    width: 18px;
                    height: 18px;
                }
            """)
            checkbox.setChecked(True)
            checkbox.stateChanged.connect(lambda state, c=card: self.update_card_style(c, state))

            # 添加模式信息
            info = QLabel(f"""
                <div style='font-size: 14px; margin-bottom: 5px;'>
                    <b>Pattern:</b> {pattern}
                </div>
                <div style='font-size: 13px; color: #555;'>
                    <span style='color: #2196F3;'>Utility:</span> {utility} &nbsp;&nbsp;
                    <span style='color: #2196F3;'>Size:</span> {size}
                </div>
            """)
            info.setWordWrap(True)

            card_layout.addWidget(checkbox, 0)
            card_layout.addWidget(info, 1)

            self.checkboxes.append((pattern, checkbox))
            self.button_group.addButton(checkbox)
            scroll_layout.addWidget(card)

        scroll_layout.addStretch()
        scroll.setWidget(scroll_content)
        layout.addWidget(scroll)

        # 添加按钮
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.setContentsMargins(0, 15, 0, 0)

        # 设置按钮样式
        for button in buttons.buttons():
            if buttons.buttonRole(button) == QDialogButtonBox.AcceptRole:
                button.setObjectName("okButton")
                button.setText("Confirm")
            else:
                button.setObjectName("cancelButton")

        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

        self.setLayout(layout)

    def update_card_style(self, card, state):
        """更新卡片样式反映选中状态"""
        card.setProperty("selected", "true" if state else "false")
        card.style().polish(card)

    def select_all_patterns(self):
        """选择所有模式"""
        for pattern, checkbox in self.checkboxes:
            checkbox.setChecked(True)

    def deselect_all_patterns(self):
        """取消选择所有模式"""
        for pattern, checkbox in self.checkboxes:
            checkbox.setChecked(False)

    def get_selected_patterns(self):
        """获取用户选择的模式"""
        return [pattern for pattern, checkbox in self.checkboxes if checkbox.isChecked()]


class HUCPM_CE_GUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.init_data()
        self.algorithm_params = {
            'distance_threshold': 20,
            'min_utility': 2000,
            'max_iterations': 300,
            'sample_size': 200,
            'alpha': 0.025,
            'beta': 0.2,
            'rho': 0.3
        }
        self.utility_dict = {}
        self.instance_data = []
        self.df = None
        self.feature_list = []
        self.current_iteration = 0
        self.high_utility_patterns = []
        self.probability_vector = {}
        self.user_selected_patterns = set()  # 用户选择的模式
        self.Ns = {}
        self.tree = {}

    def init_ui(self):
        self.setWindowTitle('APES System')
        self.setGeometry(100, 100, 1400, 900)

        # 主窗口布局
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QHBoxLayout()

        # 左侧控制面板 (保持不变)
        control_panel = self.create_control_panel()
        main_layout.addWidget(control_panel, stretch=1)

        # 右侧可视化区域
        vis_panel = QWidget()
        vis_layout = QVBoxLayout()

        # 创建Matplotlib画布
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.ax = self.figure.add_subplot(111)

        # 添加画布到布局
        vis_layout.addWidget(self.canvas, stretch=2)

        # 结果展示 (保持不变)
        result_group = self.create_result_panel()
        vis_layout.addWidget(result_group, stretch=1)

        vis_panel.setLayout(vis_layout)
        main_layout.addWidget(vis_panel, stretch=3)

        main_widget.setLayout(main_layout)

        # 初始化定时器
        self.timer = QTimer()
        self.timer.timeout.connect(self.mining_step)
        self.is_mining = False

    def create_control_panel(self):
        """创建左侧控制面板"""
        control_panel = QGroupBox("Control Panel")
        control_layout = QVBoxLayout()

        # 参数设置区域
        param_group = QGroupBox("Algorithm Parameters")
        param_layout = QVBoxLayout()

        self.distance_spin = QDoubleSpinBox()
        self.distance_spin.setRange(1, 1000)
        self.distance_spin.setValue(30)
        param_layout.addWidget(QLabel("Distance Threshold:"))
        param_layout.addWidget(self.distance_spin)

        self.utility_spin = QSpinBox()
        self.utility_spin.setRange(1, 100000)
        self.utility_spin.setValue(1100)
        param_layout.addWidget(QLabel("Min Utility:"))
        param_layout.addWidget(self.utility_spin)

        self.iter_spin = QSpinBox()
        self.iter_spin.setRange(1, 1000)
        self.iter_spin.setValue(20)
        param_layout.addWidget(QLabel("Max Iterations:"))
        param_layout.addWidget(self.iter_spin)

        self.sample_spin = QSpinBox()
        self.sample_spin.setRange(100, 100000)
        self.sample_spin.setValue(200)
        param_layout.addWidget(QLabel("Initial Sample Size:"))
        param_layout.addWidget(self.sample_spin)

        param_group.setLayout(param_layout)
        control_layout.addWidget(param_group)

        # 数据加载区域
        data_group = QGroupBox("Data Input")
        data_layout = QVBoxLayout()

        self.btn_load = QPushButton("Load Dataset (CSV)")
        self.btn_load.clicked.connect(self.load_csv_dataset)
        data_layout.addWidget(self.btn_load)

        self.btn_load_utility = QPushButton("Load Utility File")
        self.btn_load_utility.clicked.connect(self.load_utility_file)
        data_layout.addWidget(self.btn_load_utility)

        self.data_info = QLabel("No dataset loaded")
        data_layout.addWidget(self.data_info)

        data_group.setLayout(data_layout)
        control_layout.addWidget(data_group)

        # 特征选择区域
        self.feature_tree = QTreeWidget()
        self.feature_tree.setHeaderLabel("Feature Selection")
        self.feature_tree.setMaximumHeight(200)
        control_layout.addWidget(QLabel("Select Features of Interest:"))
        control_layout.addWidget(self.feature_tree)

        # 操作按钮
        self.btn_start = QPushButton("Start Mining")
        self.btn_start.clicked.connect(self.start_mining)
        self.btn_pause = QPushButton("Pause")
        self.btn_pause.clicked.connect(self.pause_mining)
        self.btn_reset = QPushButton("Reset")
        self.btn_reset.clicked.connect(self.reset_system)

        control_layout.addWidget(self.btn_start)
        control_layout.addWidget(self.btn_pause)
        control_layout.addWidget(self.btn_reset)

        # 状态显示
        self.status_label = QLabel("Ready")
        self.status_label.setWordWrap(True)
        control_layout.addWidget(self.status_label)

        self.iteration_label = QLabel("Iteration: 0")
        control_layout.addWidget(self.iteration_label)

        self.pattern_count_label = QLabel("High Utility Patterns: 0")
        control_layout.addWidget(self.pattern_count_label)

        control_panel.setLayout(control_layout)
        return control_panel

    def create_result_panel(self):
        """创建结果展示面板"""
        result_group = QGroupBox("Mining Results")
        result_layout = QVBoxLayout()

        self.result_tree = QTreeWidget()
        self.result_tree.setHeaderLabels(["Pattern", "Utility", "Size"])
        self.result_tree.itemDoubleClicked.connect(self.show_pattern_on_map)
        result_layout.addWidget(self.result_tree)

        # 详细信息文本框
        self.detail_text = QTextEdit()
        self.detail_text.setReadOnly(True)
        self.detail_text.setPlaceholderText("Pattern details will be shown here when you double-click a pattern")
        result_layout.addWidget(self.detail_text)

        result_group.setLayout(result_layout)
        return result_group

    def init_data(self):
        self.instance_data = []
        self.df = None
        self.feature_list = []
        self.utility_dict = {}
        self.current_iteration = 0
        self.high_utility_patterns = []
        self.probability_vector = {}

    def load_csv_dataset(self):
        """加载CSV格式的实例数据文件"""
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(
            self, "Open CSV Dataset File", "",
            "CSV Files (*.csv);;All Files (*)", options=options)

        if file_name:
            try:
                # 使用pandas读取CSV文件
                self.df = pd.read_csv(file_name, header=None,
                                      names=['feature', 'instance_id', 'x', 'y'])

                # 检查数据是否完整
                if self.df.isnull().values.any():
                    raise ValueError("CSV文件包含缺失值，请检查数据完整性")

                # 转换为列表格式存储
                self.instance_data = self.df.to_dict('records')

                # 1. 获取所有唯一的 feature 并按首次出现顺序排序
                unique_features = []
                for item in self.instance_data:
                    if item['feature'] not in unique_features:
                        unique_features.append(item['feature'])

                # 2. 建立 feature 到字母的映射（A, B, C, ...）
                feature_to_letter = {feature: chr(65 + i) for i, feature in enumerate(unique_features)}

                # 3. 转换数据，格式为 ['A1', x, y]
                self.instance_data = [
                    [f"{feature_to_letter[item['feature']]}{item['instance_id']}", item['x'], item['y']]
                    for item in self.instance_data
                ]

                # 找到整个网格的范围，对网格进行划分，并将实例分配进对应的网格
                x_min = min(x[1] for x in self.instance_data)
                y_min = min(x[2] for x in self.instance_data)

                hash_grid = {}
                for elem in self.instance_data:
                    x_order = math.ceil((elem[1] - x_min) / self.algorithm_params['distance_threshold'])
                    y_order = math.ceil((elem[2] - y_min) / self.algorithm_params['distance_threshold'])
                    if x_order == 0:
                        x_order += 1
                    if y_order == 0:
                        y_order += 1
                    hash_grid.setdefault((x_order, y_order), []).append(elem)

                # 根据划分的网格计算每个实例的邻近关系
                computed_neigh = lambda x, y, d: (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2 <= d ** 2
                for elem_hash, grid_instances in hash_grid.items():
                    for elem_list in grid_instances:
                        self.Ns.setdefault(elem_list[0], [])
                        for x in grid_instances:
                            if x[0][0] != elem_list[0][0] and computed_neigh(x, elem_list, self.algorithm_params['distance_threshold']):
                                self.Ns[elem_list[0]].append(x[0])

                        # 计算相邻的八个方向
                        for delta_x in range(-1, 2):
                            for delta_y in range(-1, 2):
                                if delta_x == delta_y == 0:
                                    continue
                                adjacent_grid = (elem_hash[0] + delta_x, elem_hash[1] + delta_y)
                                if adjacent_grid in hash_grid:
                                    for elem_xy in hash_grid[adjacent_grid]:
                                        if elem_xy[0][0] != elem_list[0][0] and computed_neigh(elem_xy, elem_list, self.algorithm_params['distance_threshold']):
                                            self.Ns[elem_list[0]].append(elem_xy[0])

                # 获取所有特征
                self.feature_list = sorted(self.df['feature'].unique().tolist())

                # 更新UI
                self.feature_tree.clear()
                for feature in self.feature_list:
                    item = QTreeWidgetItem(self.feature_tree)
                    item.setText(0, feature)
                    item.setCheckState(0, Qt.Unchecked)

                # 显示数据统计信息
                num_instances = len(self.df)
                num_features = len(self.feature_list)
                self.data_info.setText(
                    f"Loaded: {num_instances} instances, {num_features} features\n"
                    f"X range: [{self.df['x'].min():.2f}, {self.df['x'].max():.2f}]\n"
                    f"Y range: [{self.df['y'].min():.2f}, {self.df['y'].max():.2f}]")

                self.status_label.setText("CSV dataset loaded successfully")

                # 绘制特征分布图
                self.plot_feature_distribution()

            except Exception as e:
                self.status_label.setText(f"Error loading CSV file: {str(e)}")
                import traceback
                traceback.print_exc()

    def plot_feature_distribution(self):
        """使用Matplotlib绘制特征分布图"""
        if self.df is None or self.df.empty:
            return

        try:
            self.ax.clear()
            features = self.df['feature'].unique()

            colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'cyan', 'magenta',
                      'lime', 'teal', 'gold', 'navy', 'crimson', 'darkgreen', 'orchid', 'gray']
            markers = ['o', 's','^','v','<','>','D','p','*','h','H','X','P','8','x','+']

            for i, feature in enumerate(features):
                filtered = self.df[self.df['feature'] == feature]
                color = colors[i % len(colors)]
                marker = markers[i % len(markers)]
                self.ax.scatter(filtered['x'], filtered['y'],
                                c=color, marker=marker, label=f'{feature}', alpha=0.7, edgecolors='black',
                                linewidths=0.5)

            self.ax.set_title("Data Distribution")
            self.ax.set_xlabel("X")
            self.ax.set_ylabel("Y")
            self.ax.legend(title="Feature", loc='best')
            self.canvas.draw()
            # 在方法最后添加：
            self.figure.tight_layout()
            self.canvas.draw()

        except Exception as e:
            self.status_label.setText(f"Error plotting feature distribution: {str(e)}")
            import traceback
            traceback.print_exc()

    def load_utility_file(self):
        """加载效用文件"""
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(
            self, "Open Utility File", "",
            "CSV Files (*.csv);;Text Files (*.txt);;All Files (*)",
            options=options)

        if file_name:
            try:
                # 读取效用文件，格式为：特征,效用值
                df = pd.read_csv(file_name, header=None, names=['feature', 'utility'])

                # 创建效用字典
                self.utility_dict = {}
                for _, row in df.iterrows():
                    self.utility_dict[row['feature']] = int(row['utility'])

                self.status_label.setText(f"Utility file loaded with {len(self.utility_dict)} items")

            except Exception as e:
                self.status_label.setText(f"Error loading utility file: {str(e)}")

    def show_pattern_on_map(self, item, column):
        """当用户双击结果树中的模式时，在文本框中显示详细信息"""
        pattern = item.text(0)

        features_in_pattern = pattern.split(', ') if ',' in pattern else list(pattern)

        # 查找模式中的特征实例
        pattern_instances = []
        for _, row in self.df.iterrows():
            feature = row['feature']
            instance_id = row['instance_id']
            x = row['x']
            y = row['y']

            if feature in features_in_pattern:
                pattern_instances.append((feature, instance_id, x, y))

        # 在详细信息框中显示信息
        details = f"=== Pattern Details ===\n"
        details += f"Pattern: {pattern}\n"
        details += f"Utility: {item.text(1)}\n"
        details += f"Size: {item.text(2)}\n\n"

        details += f"=== Features ===\n"
        for feature in features_in_pattern:
            count = len([inst for inst in pattern_instances if inst[0] == feature])
            details += f"- {feature}: {count} instances\n"

        details += f"\n=== Instances ===\n"
        for inst in pattern_instances:
            details += f"{inst[0]}-{inst[1]} at ({inst[2]:.6f}, {inst[3]:.6f})\n"

        self.detail_text.setPlainText(details)

    def start_mining(self):
        if self.df is None or self.df.empty:
            self.status_label.setText("Please load dataset first!")
            return

        if not self.utility_dict:
            self.status_label.setText("Please load utility file first!")
            return

        # 获取参数
        self.algorithm_params = {
            'distance_threshold': self.distance_spin.value(),
            'min_utility': self.utility_spin.value(),
            'max_iterations': self.iter_spin.value(),
            'sample_size': self.sample_spin.value(),
            'alpha': 0.025,
            'beta': 0.2,
            'rho': 0.3
        }

        # 获取用户选择的特征
        self.selected_features = []
        root = self.feature_tree.invisibleRootItem()
        for i in range(root.childCount()):
            item = root.child(i)
            if item.checkState(0) == Qt.Checked:
                self.selected_features.append(item.text(0))

        # 初始化算法状态
        self.current_iteration = 0
        self.high_utility_patterns = []
        self.user_selected_patterns = set()
        self.result_tree.clear()
        self.detail_text.clear()

        # 计算初始概率
        self.initialize_algorithm()

        # 开始迭代
        self.is_mining = True
        self.timer.start(100)  # 每100ms执行一次迭代步骤
        self.status_label.setText("Mining started...")

    def pause_mining(self):
        if self.is_mining:
            self.timer.stop()
            self.is_mining = False
            self.btn_pause.setText("Resume")
            self.status_label.setText("Mining paused")
        else:
            self.timer.start(100)
            self.is_mining = True
            self.btn_pause.setText("Pause")
            self.status_label.setText("Mining resumed")

    def reset_system(self):
        self.timer.stop()
        self.is_mining = False
        self.init_data()
        self.ax.clear()
        self.canvas.draw()
        self.feature_tree.clear()
        self.result_tree.clear()
        self.detail_text.clear()
        self.status_label.setText("System reset")
        self.iteration_label.setText("Iteration: 0")
        self.pattern_count_label.setText("High Utility Patterns: 0")

    def initialize_algorithm(self):
        # 初始化步骤：设置概率向量，根据是否有选中特征决定初始化方式
        print(self.selected_features)

        if not self.selected_features:
            # 用户未选择任何特征，所有特征概率设为0.5
            for feature in self.feature_list:
                self.probability_vector[feature] = 0.5
        else:
            # 用户选择了特征，使用加权公式计算
            selected_count = len(self.selected_features)
            for feature in self.feature_list:
                if feature in self.selected_features:
                    self.probability_vector[feature] = 0.5 + 0.5 * (1.0 / selected_count)
                else:
                    # 未选中的特征仍设为0.5
                    self.probability_vector[feature] = 0.5

        self.status_label.setText("Algorithm initialized with probability vector")

    def structure_tree(self, i, can_key, nis, temp_clique, key, inter, A):
        if len(inter) == 0:
            return
        if i == len(can_key) and temp_clique not in A:
            A.append(temp_clique)
            return

        for elem in inter:
            if elem[0] == can_key[i]:
                new_temp_clique = temp_clique + [elem]
                new_inter = sorted(list(set(nis[elem]) & set(inter)))
                self.structure_tree(i + 1, can_key, nis, new_temp_clique, key, new_inter, A)
                if len(new_temp_clique) + 1 == len(can_key):
                    A.append(new_temp_clique)
        return

    def compute_utility(self, tree, utility, can_pattern):
        feature_number = {}

        for feature in can_pattern:
            feature_number[feature] = []
        for key in tree.keys():
            feature_number[key[0]].append(key)
            for elem in tree[key]:
                for elem_1 in elem:
                    if elem_1 not in feature_number[elem_1[0]]:
                        feature_number[elem_1[0]].append(elem_1)

        str = ""  # 当前模式
        for feature in can_pattern:
            str += feature
        pattern_utility = 0
        # print(feature_number)
        for key in feature_number.keys():
            pattern_utility += len(feature_number[key]) * utility[key]
        return pattern_utility

    def mining_step(self):
        if self.current_iteration >= self.algorithm_params['max_iterations']:
            self.timer.stop()
            self.is_mining = False
            self.status_label.setText(f"Mining completed! Found {len(self.high_utility_patterns)} patterns")

            # 清空结果树并显示最终挖掘结果
            self.result_tree.clear()
            for pattern, utility, size in self.high_utility_patterns:
                item = QTreeWidgetItem(self.result_tree)
                item.setText(0, ", ".join(pattern))  # 将列表转换为逗号分隔的字符串
                item.setText(1, str(utility))
                item.setText(2, str(size))
            return

        self.current_iteration += 1
        self.iteration_label.setText(f"Iteration: {self.current_iteration}")

        # 根据概率向量生成样本
        samples = []
        generated_patterns = set()  # 用集合提高查找效率

        sample_size = self.algorithm_params['sample_size']
        features = list(self.probability_vector.keys())

        # 创建特征到字母的映射
        feature_to_letter = {}
        for i, feature in enumerate(features):
            letter = chr(65 + i)  # A, B, C, ...
            feature_to_letter[feature] = letter

        # print("原始特征:", features)
        # print("字母映射:", feature_to_letter)

        # 注意：概率向量应该基于原始特征，而不是字母
        probs = [self.probability_vector[f] for f in features]  # 关键修正点

        while len(samples) < sample_size:
            # 采样时使用原始特征判断
            sampled_features = [f for f, p in zip(features, probs) if random.random() < p]

            if len(sampled_features) >= 2:
                # 转换为字母模式
                letter_pattern = ','.join(sorted([feature_to_letter[f] for f in sampled_features]))

                if letter_pattern not in generated_patterns:
                    samples.append(letter_pattern)
                    generated_patterns.add(letter_pattern)

        # 构建一颗树
        for pattern in samples:
            tree = {}
            pattern = pattern.split(',')
            for key in self.Ns.keys():
                i = 1  # 记录现在是树的第几层
                A = []
                if key[0] == pattern[i - 1]:
                    tree[key] = []  # 生成头节点
                    for elem in self.Ns[key]:  # 遍历头节点的邻近关系找到对应特征的实例 进入a1
                        if elem[0] == pattern[i]:
                            temp_clique = [elem]  # 存储暂时团
                            if len(pattern) > i + 1:
                                inter = sorted(list(set(self.Ns[elem]) & set(self.Ns[key])))
                                self.structure_tree(i + 1, pattern, self.Ns, temp_clique, key, inter, A)
                            else:
                                tree[key].append(temp_clique)
                    if len(A) != 0:
                        for elem in A:
                            tree[key].append(elem)
                    if len(tree[key]) == 0:
                        del tree[key]

            # print(pattern, tree)

            sequence = []
            for i in range(len(self.utility_dict)):
                sequence.append(chr(65 + i))  # A-Z

            original_keys = list(self.utility_dict.keys())

            mapping_dict = {original: letter for original, letter in zip(original_keys, sequence)}

            new_dict = {mapping_dict[k]: v for k, v in self.utility_dict.items()}

            feature_number = collections.defaultdict(list)
            # 预初始化所有pattern中的特征（可选）
            for feature in pattern:
                feature_number[feature] = []

            for key in tree:
                # 确保key是字符串且非空
                if not isinstance(key, str) or not key:
                    continue

                feature = key[0]
                feature_number[feature].append(key)

                for elem in tree[key]:
                    # 确保elem是可迭代对象
                    if not isinstance(elem, (list, tuple)):
                        continue

                    for elem_1 in elem:
                        # 确保elem_1是字符串且非空
                        if isinstance(elem_1, str) and elem_1:
                            feature_e1 = elem_1[0]
                            if elem_1 not in feature_number[feature_e1]:
                                feature_number[feature_e1].append(elem_1)

            utility = 0
            for key in feature_number.keys():

                utility += len(feature_number[key]) * new_dict[key]

            # 检查是否满足效用阈值
            if utility >= self.algorithm_params['min_utility']:

                if (pattern, utility, len(pattern)) not in self.high_utility_patterns:
                    self.high_utility_patterns.append((pattern, utility, len(pattern)))

        # print(self.high_utility_patterns)
        # print(self.probability_vector)
        # 每次迭代挖掘完都需要更新概率  然后每十次根据用户的选择特征微微调整方向

        sorted_keys = sorted(self.probability_vector.keys())
        letter_labels = string.ascii_uppercase[:len(sorted_keys)]
        new_probability_dict = {
            letter: self.probability_vector[key]
            for letter, key in zip(letter_labels, sorted_keys)
        }

        # 统计字母出现次数
        counter = Counter()
        for item in self.high_utility_patterns:
            counter.update(item[0])  # item[0]就是字母列表
        # print(counter)
        # print(len(self.high_utility_patterns))

        # 更新概率向量
        for elem in counter:
            new_probability_dict[elem] = counter[elem] / len(self.high_utility_patterns)

        # 每10次迭代暂停并让用户选择模式
        if self.current_iteration % 10 == 0 and self.current_iteration < self.algorithm_params['max_iterations']:
            self.timer.stop()
            self.is_mining = False

            # 获取最近10次迭代发现的模式
            recent_patterns = self.high_utility_patterns[-10:] if len(
                self.high_utility_patterns) > 10 else self.high_utility_patterns

            name_patterns = []
            for item in recent_patterns:
                letters = item[0]
                value1 = item[1]
                value2 = item[2]
                names = []
                for letter in letters:
                    for key in feature_to_letter:
                        if feature_to_letter[key] == letter:
                            names.append(key)
                            continue

                # 创建新的元组并添加到结果列表
                name_patterns.append((names, value1, value2))

            user_select = Counter()
            if name_patterns:
                # 显示对话框让用户选择模式
                dialog = PatternSelectionDialog(name_patterns, self)
                if dialog.exec_() == QDialog.Accepted:
                    selected = dialog.get_selected_patterns()

                    for pattern in selected:
                        user_select.update(pattern)

            print(user_select)
            for item in user_select:
                new_probability_dict[item] = new_probability_dict[feature_to_letter[item]] + 0.3 * (user_select[item] / len(user_select))

            # 继续挖掘
            self.is_mining = True
            self.timer.start(100)

        values = list(new_probability_dict.values())
        for i, key in enumerate(self.probability_vector.keys()):
            if i < len(values):
                self.probability_vector[key] = values[i]

        # print(self.probability_vector)

        converted_data = []
        for item in self.high_utility_patterns:
            letters = item[0]
            value1 = item[1]
            value2 = item[2]
            names = []
            for letter in letters:
                for key in feature_to_letter:
                    if feature_to_letter[key] == letter:
                        names.append(key)
                        continue

            # 创建新的元组并添加到结果列表
            converted_data.append((names, value1, value2))

        if self.current_iteration == self.algorithm_params['max_iterations']:
            self.high_utility_patterns = converted_data

        # 更新UI
        self.pattern_count_label.setText(f"High Utility Patterns: {len(converted_data)}")

        # 显示状态
        top_patterns = sorted(converted_data, key=lambda x: -x[1])[:5]
        status = f"Iteration {self.current_iteration}: Found {len(converted_data)} patterns\n"
        status += "Top patterns:\n"
        for i, (pattern, utility, size) in enumerate(top_patterns, 1):
            status += f"{i}. {pattern} (Utility: {utility}, Size: {size})\n"
        self.status_label.setText(status)


class InteractiveGraphicsView(QGraphicsView):
    """移除缩放功能的交互式图形视图"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setRenderHint(QPainter.Antialiasing)
        self.setRenderHint(QPainter.SmoothPixmapTransform)
        self.setDragMode(QGraphicsView.ScrollHandDrag)
        self.setInteractive(True)
        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        self.setResizeAnchor(QGraphicsView.AnchorUnderMouse)

    def wheelEvent(self, event):
        """禁用鼠标滚轮缩放"""
        event.ignore()  # 忽略滚轮事件

    def keyPressEvent(self, event):
        """禁用键盘缩放"""
        # 只保留Home键的重置视图功能
        if event.key() == Qt.Key_Home:
            self.fitInView(self.scene().sceneRect(), Qt.KeepAspectRatio)
        else:
            super().keyPressEvent(event)

    def mousePressEvent(self, event):
        """鼠标按下事件处理"""
        if event.button() == Qt.LeftButton:
            self.setDragMode(QGraphicsView.ScrollHandDrag)
        super().mousePressEvent(event)

    def mouseReleaseEvent(self, event):
        """鼠标释放事件处理"""
        if event.button() == Qt.LeftButton:
            self.setDragMode(QGraphicsView.NoDrag)
        super().mouseReleaseEvent(event)

    def fitInView(self, rect, aspectRatioMode):
        """重写fitInView以确保正确显示"""
        if rect.isNull():
            return

        self.scene().setSceneRect(rect)
        unity = self.transform().mapRect(QRectF(0, 0, 1, 1))
        self.scale(1 / unity.width(), 1 / unity.height())
        view_rect = self.viewport().rect()
        scene_rect = self.transform().mapRect(rect)

        x_ratio = view_rect.width() / scene_rect.width()
        y_ratio = view_rect.height() / scene_rect.height()

        if aspectRatioMode == Qt.KeepAspectRatio:
            x_ratio = y_ratio = min(x_ratio, y_ratio)
        elif aspectRatioMode == Qt.KeepAspectRatioByExpanding:
            x_ratio = y_ratio = max(x_ratio, y_ratio)

        self.scale(x_ratio, y_ratio)
        self.centerOn(rect.center())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = HUCPM_CE_GUI()
    window.show()
    sys.exit(app.exec_())
